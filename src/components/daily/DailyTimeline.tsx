"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import type { CalendarEvent } from '@/lib/types';
import { format, startOfDay, addHours, isSameDay, parseISO } from 'date-fns';
import { CheckCircle, Clock, Zap, Calendar as CalendarIcon } from 'lucide-react';

// Mock function to simulate fetching events
const fetchEvents = async (date: Date): Promise<CalendarEvent[]> => {
  // In a real app, this would fetch from a data source (local or remote)
  await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API delay
  const today = startOfDay(new Date());
  if (!isSameDay(date, today)) return []; // Only show mock events for today

  return [
    { id: '1', title: 'Morning Standup', startTime: addHours(today, 9).toISOString(), endTime: addHours(today, 9.5).toISOString(), source: 'synced_calendar', description: 'Team daily sync' },
    { id: '2', title: 'Deep Work: Project Phoenix', startTime: addHours(today, 10).toISOString(), endTime: addHours(today, 12).toISOString(), source: 'user_planned' },
    { id: '3', title: 'Lunch Break', startTime: addHours(today, 12).toISOString(), endTime: addHours(today, 13).toISOString(), source: 'habit_log', description: 'Logged meal' },
    { id: '4', title: 'Client Meeting', startTime: addHours(today, 14).toISOString(), endTime: addHours(today, 15).toISOString(), source: 'synced_calendar' },
    { id: '5', title: 'Gym Session', startTime: addHours(today, 17.5).toISOString(), endTime: addHours(today, 18.5).toISOString(), source: 'habit_log', description: 'Completed workout habit' },
    { id: '6', title: 'AI Scheduled: Prep for tomorrow', startTime: addHours(today, 16).toISOString(), endTime: addHours(today, 16.5).toISOString(), source: 'ai_scheduled', description: 'Generated by AI scheduler'},
  ].sort((a, b) => parseISO(a.startTime).getTime() - parseISO(b.startTime).getTime());
};

const EventIcon = ({ source }: { source: CalendarEvent['source'] }) => {
  switch (source) {
    case 'synced_calendar': return <CalendarIcon className="h-4 w-4 text-blue-500" />;
    case 'user_planned': return <Clock className="h-4 w-4 text-purple-500" />;
    case 'habit_log': return <CheckCircle className="h-4 w-4 text-green-500" />;
    case 'ai_scheduled': return <Zap className="h-4 w-4 text-orange-500" />;
    default: return <CalendarIcon className="h-4 w-4 text-muted-foreground" />;
  }
};

export function DailyTimeline() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsLoading(true);
    fetchEvents(currentDate).then(fetchedEvents => {
      setEvents(fetchedEvents);
      setIsLoading(false);
    });
  }, [currentDate]);

  // Create time slots for the day
  const timeSlots = Array.from({ length: 24 }, (_, i) => {
    const hour = startOfDay(currentDate);
    hour.setHours(i);
    return hour;
  });

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle className="font-headline text-xl">
          Daily Timeline - {format(currentDate, 'EEEE, MMMM do')}
        </CardTitle>
      </CardHeader>
      <CardContent className="flex-grow overflow-hidden">
        {isLoading ? (
          <div className="flex items-center justify-center h-full">
            <p>Loading timeline...</p>
          </div>
        ) : (
          <ScrollArea className="h-[calc(100vh-250px)] pr-4 relative"> {/* Adjust height as needed */}
            <div className="relative">
              {/* Render time slots and grid lines */}
              {timeSlots.map((slot, index) => (
                <div key={index} className="flex items-start h-24 border-b border-dashed">
                  <div className="w-16 pr-2 text-right text-xs text-muted-foreground pt-1 sticky top-0 bg-card">
                    {format(slot, 'ha')}
                  </div>
                  <div className="flex-1 relative">
                    {/* Placeholder for events */}
                  </div>
                </div>
              ))}
              
              {/* Render events */}
              {events.map(event => {
                const start = parseISO(event.startTime);
                const end = parseISO(event.endTime);
                const topOffset = (start.getHours() + start.getMinutes() / 60) * 6; // 6rem per hour (24 * 0.25rem)
                const height = ((end.getTime() - start.getTime()) / (1000 * 60 * 60)) * 6; // 6rem per hour

                return (
                  <div
                    key={event.id}
                    className="absolute left-16 right-0 ml-2 p-2 rounded-lg shadow-md transition-all duration-300 ease-in-out hover:shadow-lg"
                    style={{ 
                      top: `${topOffset}rem`, 
                      height: `${height}rem`,
                      backgroundColor: 'hsl(var(--primary) / 0.1)',
                      borderLeft: '4px solid hsl(var(--primary))',
                    }}
                    aria-label={`Event: ${event.title} from ${format(start, 'p')} to ${format(end, 'p')}`}
                  >
                    <div className="flex items-start gap-2">
                      <EventIcon source={event.source} />
                      <div>
                        <p className="font-semibold text-sm text-primary-foreground leading-tight">{event.title}</p>
                        <p className="text-xs text-muted-foreground leading-tight">
                          {format(start, 'p')} - {format(end, 'p')}
                        </p>
                        {event.description && <p className="text-xs text-muted-foreground mt-1 leading-tight">{event.description}</p>}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
}
